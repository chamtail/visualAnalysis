/**
 * js动态生成配置文件
 * Created by Jeremy on 2018/11/23.
 */

// 同步执行
$.ajaxSettings.async = false;

/**
 * 环境变量
 * @type {{0: test, 1: *, 2: *}}
 */
var env_map = {
    debug: 'debug',
    test: 'test',
    dev: 'dev',
    prod: 'prod'
};

/**
 * 获取所有节点状态
 * @type {{}}
 */
var components = {};
$.getJSON("../config/components/components.json", function (data) {
    $.each(data, function (component, status) {
        components[component] = status;
    })
});

/**
 * 获取节点类别
 * @type {{}}
 */
var category_list = {};  // 节点类别
$.getJSON("../config/components/category.json", function (data) {
    $.each(data, function (category, content) {
        category_list[category] = content;
    })
});
// console.log(JSON.stringify(category_list));

/**
 * 遍历所有节点，获取节点信息
 */
var node_category = {};  // 节点类别
var component_config = {};  // 节点配置
var component_params = {};  // 节点参数
$.each(components, function (component, status) {
    if (status == "enable") {
        // 读取该节点配置文件
        $.getJSON("../config/components/" + component + ".json", function (nodeConfig) {
            var category = nodeConfig.category;
            var subModule = "";
            var modules = category.split("/");
            category = modules[0];
            subModule = modules[1];

            // 添加节点类别
            if (!category_list[category]) {
                // console.error("category doesn't have this category!");
                return;
            }
            if (!node_category[category]) {
                node_category[category] = category_list[category];
            }

            // 判断该类别下是否含有子模块
            if (subModule && category_list[subModule]) {
                if (!node_category[category].sub_modules) {
                    node_category[category].sub_modules = {};
                }
                if (!node_category[category].sub_modules[subModule]) {
                    node_category[category].sub_modules[subModule] = category_list[subModule];
                    node_category[category].sub_modules[subModule]["nodes"] = {};
                }
                node_category[category].sub_modules[subModule]["nodes"][component] = {
                    "zh": nodeConfig.display.zh,
                    "en": nodeConfig.display.en,
                    "in": nodeConfig.in,
                    "out": nodeConfig.out
                };
            } else {
                if (!node_category[category]["nodes"]) {
                    node_category[category]["nodes"] = {};
                }
                node_category[category]["nodes"][component] = {
                    "zh": nodeConfig.display.zh,
                    "en": nodeConfig.display.en,
                    "in": nodeConfig.in,
                    "out": nodeConfig.out
                };
            }

            // 添加节点配置
            component_config[component] = nodeConfig;

            if (!component_params[component]) {
                component_params[component] = [];
            }
            // 添加节点参数
            for (var i = 0; i < nodeConfig.params.length; i++) {
                if (nodeConfig.params[i].enable && nodeConfig.params[i].configurable) {
                    component_params[component].push(nodeConfig.params[i].name);
                }
            }
        });
    } else if (status == component) {
        // 读取工作流配置文件
        $.getJSON("../config/components/" + component + ".json", function (flowConfig) {

            // 添加工作流配置
            component_config.flow = flowConfig;

            if (!component_params.flow) {
                component_params.flow = [];
            }
            // 添加节点参数
            for (var i = 0; i < flowConfig.params.length; i++) {
                if (flowConfig.params[i].enable && flowConfig.params[i].configurable) {
                    component_params.flow.push(flowConfig.params[i].name);
                }
            }
        });
    }
});
// console.log(JSON.stringify(node_category));
// console.log(JSON.stringify(component_config));
// console.log(JSON.stringify(component_params));

/**
 * API
 */
var api_map = {};
$.getJSON("../config/API/api_" + env_map[env], function (data) {
    $.each(data, function (api, address) {
        api_map[api] = address.protocol + "://" + address.host + ":" + address.port + address.api;
    });
});
// console.log(JSON.stringify(api_map));

/**
 * 节点状态
 */
var node_status_map = {};
$.getJSON("../config/nodeStatus.json", function (data) {
    $.each(data, function (code, status) {
        node_status_map[code] = status;
    });
});
// console.log(JSON.stringify(node_status_map));

// 异步执行
$.ajaxSettings.async = true;